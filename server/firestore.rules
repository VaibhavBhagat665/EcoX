rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             ('admin' in request.auth.token && request.auth.token.admin == true);
    }
    
    function isValidEmail() {
      return isAuthenticated() && 
             request.auth.token.email_verified == true;
    }

    // Users collection - users can read/write their own documents
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) && isValidEmail();
      allow create: if isOwner(userId) && isValidEmail() && 
                       validateUserData();
      allow update: if isOwner(userId) && isValidEmail() && 
                       validateUserUpdate();
      allow delete: if isAdmin(); // Only admins can delete users
      
      function validateUserData() {
        let data = request.resource.data;
        return data.uid == userId &&
               data.email == request.auth.token.email &&
               data.keys().hasAll(['uid', 'email', 'name']) &&
               data.uid is string &&
               data.email is string &&
               data.name is string &&
               data.totalTokens >= 0 &&
               data.carbonSavedKg >= 0;
      }
      
      function validateUserUpdate() {
        let data = request.resource.data;
        let existing = resource.data;
        
        // Prevent users from updating critical fields directly
        return data.uid == existing.uid &&
               data.email == existing.email &&
               // Allow updating preferences and some profile fields
               (!data.diff(existing).affectedKeys().hasAny(['totalTokens', 'carbonSavedKg']) 
                || isAdmin());
      }
    }

    // Actions collection - users can submit and read their own actions
    match /actions/{actionId} {
      allow read: if isOwner(resource.data.uid) || isAdmin();
      allow create: if isAuthenticated() && 
                       resource.data.uid == request.auth.uid &&
                       validateActionData();
      allow update: if isAdmin() || 
                       (isOwner(resource.data.uid) && validateActionUpdate());
      allow delete: if isAdmin();
      
      function validateActionData() {
        let data = resource.data;
        return data.keys().hasAll(['uid', 'type', 'data', 'status']) &&
               data.uid == request.auth.uid &&
               data.type in ['energy', 'transport', 'solar', 'waste', 'water', 'tree_planting'] &&
               data.status == 'pending' &&
               data.tokensIssued == 0;
      }
      
      function validateActionUpdate() {
        let data = request.resource.data;
        let existing = resource.data;
        
        // Users can only update their pending actions (not verified/rejected ones)
        return existing.status == 'pending' &&
               data.uid == existing.uid &&
               data.type == existing.type &&
               // Only allow updating data and description fields
               !data.diff(existing).affectedKeys().hasAny(['status', 'tokensIssued', 'txHash', 'verifyAt']);
      }
    }

    // Transactions collection - read-only for users, write for backend service
    match /transactions/{txId} {
      allow read: if isOwner(resource.data.uid) || isAdmin();
      allow write: if isAdmin(); // Only backend service (admin) can write transactions
    }

    // Leaderboard collection - public read access
    match /leaderboard/{period} {
      allow read: if true; // Public read access for leaderboards
      allow write: if isAdmin(); // Only backend can update leaderboards
    }

    // System collections (admin only)
    match /system/{document=**} {
      allow read, write: if isAdmin();
    }

    // Analytics collection (admin only) 
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }

    // Audit logs (admin read only)
    match /audit/{document=**} {
      allow read: if isAdmin();
      allow write: if false; // System generated only
    }

    // Chat messages - users can read/write their own conversations
    match /chats/{userId}/messages/{messageId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin();
    }

    // User preferences subcollection
    match /users/{userId}/preferences/{prefId} {
      allow read, write: if isOwner(userId);
    }

    // User private data subcollection (encrypted sensitive data)
    match /users/{userId}/private/{docId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin();
    }

    // Default deny rule - be explicit about denying access to undefined paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Additional rules for Firebase Storage (if using)
// service firebase.storage {
//   match /b/{bucket}/o {
//     // User uploads (bill images, etc.)
//     match /uploads/{userId}/{allPaths=**} {
//       allow read, write: if request.auth != null && request.auth.uid == userId;
//     }
//     
//     // Public assets
//     match /public/{allPaths=**} {
//       allow read: if true;
//       allow write: if request.auth != null && 
//                       ('admin' in request.auth.token && request.auth.token.admin == true);
//     }
//   }
// }
