/**
 * Gemini AI integration for EcoX
 * Handles real AI processing using Google's Gemini API
 */

const GEMINI_API_KEY = process.env.VITE_GEMINI_API_KEY || process.env.GEMINI_API_KEY;
const GEMINI_BASE_URL = 'https://generativelanguage.googleapis.com/v1beta';

interface GeminiResponse {
  candidates: {
    content: {
      parts: {
        text: string;
      }[];
    };
  }[];
}

/**
 * Generate content using Gemini API
 */
async function generateContent(prompt: string, model = 'gemini-pro'): Promise<string> {
  if (!GEMINI_API_KEY || GEMINI_API_KEY === '__SET_IN_REPLIT_SECRETS__') {
    throw new Error('Gemini API key not configured');
  }

  try {
    const response = await fetch(
      `${GEMINI_BASE_URL}/models/${model}:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: prompt
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1024,
          }
        })
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', response.status, errorText);
      throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
    }

    const data: GeminiResponse = await response.json();
    
    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('No response generated by Gemini');
    }

    return data.candidates[0].content.parts[0].text;
  } catch (error) {
    console.error('Gemini API request failed:', error);
    throw error;
  }
}

/**
 * Analyze environmental action using Gemini AI
 */
export async function analyzeEnvironmentalAction(data: {
  type: string;
  description: string;
  kWh?: number;
  imageUrl?: string;
  userSubmittedData: any;
}): Promise<{
  verified: boolean;
  confidence: number;
  aiAnalysis: string;
  co2Saved?: number;
  tokensRecommended?: number;
}> {
  try {
    const prompt = `
Analyze this environmental action for EcoX platform:

Action Type: ${data.type}
Description: ${data.description}
Energy Data: ${data.kWh ? `${data.kWh} kWh` : 'Not provided'}
Additional Data: ${JSON.stringify(data.userSubmittedData)}

Please provide:
1. Verification assessment (realistic/credible?)
2. Confidence score (0-100)
3. Estimated CO2 reduction in kg
4. Recommended ECO tokens to award (1 token = 1 kg CO2 saved)
5. Brief analysis explaining your reasoning

Format your response as JSON:
{
  "verified": boolean,
  "confidence": number,
  "aiAnalysis": "string",
  "co2Saved": number,
  "tokensRecommended": number
}

Be realistic and conservative in your estimates. Focus on actual environmental impact.
`;

    const response = await generateContent(prompt);
    
    try {
      // Try to parse as JSON
      const parsed = JSON.parse(response);
      return {
        verified: parsed.verified || false,
        confidence: Math.max(0, Math.min(100, parsed.confidence || 0)) / 100,
        aiAnalysis: parsed.aiAnalysis || 'AI analysis completed',
        co2Saved: Math.max(0, parsed.co2Saved || 0),
        tokensRecommended: Math.max(0, parsed.tokensRecommended || 0)
      };
    } catch (parseError) {
      // If JSON parsing fails, create response from text
      console.warn('Failed to parse Gemini JSON response, using text analysis');
      
      const confidence = response.toLowerCase().includes('verified') || 
                        response.toLowerCase().includes('credible') ? 0.75 : 0.4;
      
      return {
        verified: confidence > 0.5,
        confidence,
        aiAnalysis: response.substring(0, 200) + '...',
        co2Saved: data.kWh ? data.kWh * 0.4 : 10, // Rough estimate
        tokensRecommended: data.kWh ? Math.floor(data.kWh * 0.4) : 10
      };
    }
  } catch (error) {
    console.error('Gemini analysis failed:', error);
    
    // Fallback response when Gemini fails
    return {
      verified: false,
      confidence: 0.3,
      aiAnalysis: `Gemini AI analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}. Using fallback assessment.`,
      co2Saved: data.kWh ? data.kWh * 0.3 : 5,
      tokensRecommended: data.kWh ? Math.floor(data.kWh * 0.3) : 5
    };
  }
}

/**
 * Generate environmental recommendations using Gemini
 */
export async function generateEnvironmentalRecommendations(userProfile: {
  totalTokens: number;
  carbonSaved: number;
  recentActions: string[];
}): Promise<{
  recommendations: Array<{
    id: string;
    title: string;
    description: string;
    impact: 'high' | 'medium' | 'low';
    category: string;
    potentialTokens: number;
  }>;
}> {
  try {
    const prompt = `
Generate 3-4 personalized environmental recommendations for this EcoX user:

User Profile:
- Total ECO Tokens: ${userProfile.totalTokens}
- Carbon Saved: ${userProfile.carbonSaved} kg
- Recent Actions: ${userProfile.recentActions.join(', ')}

Provide recommendations that:
1. Build on their current efforts
2. Offer realistic next steps
3. Have measurable environmental impact
4. Can earn ECO tokens (1 token ≈ 1 kg CO2 saved)

Format as JSON array:
[
  {
    "id": "unique_id",
    "title": "Action Title",
    "description": "Detailed description with actionable steps",
    "impact": "high|medium|low",
    "category": "Energy|Transportation|Waste|Water|Solar",
    "potentialTokens": number
  }
]

Keep descriptions practical and achievable.
`;

    const response = await generateContent(prompt);
    
    try {
      const recommendations = JSON.parse(response);
      return { 
        recommendations: Array.isArray(recommendations) ? recommendations.map((rec, index) => ({
          id: rec.id || `rec_${index + 1}`,
          title: rec.title || 'Environmental Action',
          description: rec.description || 'No description available',
          impact: rec.impact || 'medium',
          category: rec.category || 'General',
          potentialTokens: rec.potentialTokens || 10
        })) : []
      };
    } catch (parseError) {
      console.warn('Failed to parse recommendations, using fallback');
      
      // Generate fallback recommendations based on user profile
      const fallbackRecs = [
        {
          id: 'energy_efficiency',
          title: 'Smart Home Energy Audit',
          description: 'Conduct a comprehensive energy audit and implement efficiency measures',
          impact: 'high' as const,
          category: 'Energy',
          potentialTokens: 25
        },
        {
          id: 'solar_exploration', 
          title: 'Solar Panel Assessment',
          description: 'Get quotes for solar installation and calculate potential savings',
          impact: 'high' as const,
          category: 'Solar',
          potentialTokens: 100
        }
      ];
      
      return { recommendations: fallbackRecs };
    }
  } catch (error) {
    console.error('Failed to generate recommendations:', error);
    
    // Return empty recommendations on error
    return { recommendations: [] };
  }
}

/**
 * Chat with Gemini AI assistant
 */
export async function chatWithGeminiAssistant(message: string, userContext?: any): Promise<{
  response: string;
  timestamp: string;
}> {
  try {
    const contextPrompt = userContext ? `
User Context:
- ECO Tokens: ${userContext.totalTokens || 0}
- Carbon Saved: ${userContext.carbonSaved || 0} kg
- Recent Activity: ${userContext.recentActions || 'None'}

` : '';

    const prompt = `${contextPrompt}You are an environmental assistant for EcoX, a platform that rewards sustainable actions with ECO tokens.

User message: "${message}"

Provide helpful, encouraging advice about:
- Environmental actions and sustainability
- How to earn more ECO tokens
- Carbon footprint reduction
- Energy efficiency tips
- Sustainable lifestyle choices

Be concise, practical, and motivating. If the user asks about something unrelated to environment/sustainability, gently redirect to eco-friendly topics.
`;

    const response = await generateContent(prompt);
    
    return {
      response: response.trim(),
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('Gemini chat failed:', error);
    
    return {
      response: `I'm having trouble connecting to my AI systems right now. Here's a quick tip: Small changes like switching to LED bulbs or using a smart thermostat can significantly reduce your energy consumption and earn you ECO tokens! Would you like to submit an energy-saving action?`,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Check if Gemini service is available
 */
export function isGeminiAvailable(): boolean {
  return !!(GEMINI_API_KEY && GEMINI_API_KEY !== '__SET_IN_REPLIT_SECRETS__');
}

// Log initialization status
if (isGeminiAvailable()) {
  console.log('✅ Gemini AI service initialized successfully');
} else {
  console.log('⚠️ Gemini AI service not available - API key not configured');
}
