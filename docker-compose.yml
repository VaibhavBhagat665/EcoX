# EcoX Backend Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecox-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecox
      POSTGRES_USER: ecox_user
      POSTGRES_PASSWORD: ecox_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecox_user -d ecox"]
      interval: 10s
      timeout: 5s
      retries: 5

  # EcoX Backend API
  ecox-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecox-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://ecox_user:ecox_password@postgres:5432/ecox
      
      # Firebase Configuration (set these in .env file)
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY}
      
      # Blockchain Configuration
      ECO_TOKEN_CONTRACT_ADDRESS: ${ECO_TOKEN_CONTRACT_ADDRESS:-0x0000000000000000000000000000000000000000}
      BLOCKCHAIN_RPC_URL: ${BLOCKCHAIN_RPC_URL:-https://polygon-rpc.com}
      PRIVATE_KEY: ${PRIVATE_KEY}
      
      # AI Service Configuration
      AI_SERVICE_URL: ${AI_SERVICE_URL:-http://ai-service:8001}
      AI_SERVICE_API_KEY: ${AI_SERVICE_API_KEY}
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status/firebase"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ecox-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # AI Verification Service (Python microservice)
  ai-service:
    image: ecox/ai-verification:latest
    container_name: ecox-ai-service
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      REDIS_URL: redis://redis:6379
      MODEL_PATH: /app/models
      API_KEY: ${AI_SERVICE_API_KEY}
    volumes:
      - ./ai-models:/app/models
    depends_on:
      - redis

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: ecox-network