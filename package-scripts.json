{
  "scripts": {
    "dev": {
      "description": "Start development server with hot reload",
      "script": "NODE_ENV=development tsx server/index.ts"
    },
    "start": {
      "description": "Start production server",
      "script": "NODE_ENV=production node server/index.js"
    },
    "build": {
      "description": "Build TypeScript to JavaScript",
      "script": "tsc --build"
    },
    "test": {
      "description": "Run all tests",
      "script": "jest"
    },
    "test:unit": {
      "description": "Run unit tests",
      "script": "jest --testPathPattern=unit"
    },
    "test:integration": {
      "description": "Run integration tests",
      "script": "jest --testPathPattern=integration"
    },
    "test:watch": {
      "description": "Run tests in watch mode",
      "script": "jest --watch"
    },
    "test:coverage": {
      "description": "Run tests with coverage report",
      "script": "jest --coverage"
    },
    "lint": {
      "description": "Lint TypeScript code",
      "script": "eslint server/ shared/ --ext .ts --fix"
    },
    "format": {
      "description": "Format code with Prettier",
      "script": "prettier --write server/ shared/"
    },
    "type-check": {
      "description": "Check TypeScript types",
      "script": "tsc --noEmit"
    },
    "db:generate": {
      "description": "Generate database migrations",
      "script": "drizzle-kit generate:pg"
    },
    "db:migrate": {
      "description": "Run database migrations",
      "script": "drizzle-kit push:pg"
    },
    "db:studio": {
      "description": "Open Drizzle Studio",
      "script": "drizzle-kit studio"
    },
    "db:seed": {
      "description": "Seed database with sample data",
      "script": "tsx scripts/seed-database.ts"
    },
    "db:reset": {
      "description": "Reset database (development only)",
      "script": "tsx scripts/reset-database.ts"
    },
    "docker:build": {
      "description": "Build Docker image",
      "script": "docker build -t ecox-backend ."
    },
    "docker:run": {
      "description": "Run Docker container",
      "script": "docker run -d --name ecox-backend -p 5000:5000 --env-file .env ecox-backend"
    },
    "docker:compose:up": {
      "description": "Start all services with Docker Compose",
      "script": "docker-compose up -d"
    },
    "docker:compose:down": {
      "description": "Stop all services with Docker Compose", 
      "script": "docker-compose down"
    },
    "health-check": {
      "description": "Check API health",
      "script": "curl -f http://localhost:5000/api/status/firebase || exit 1"
    },
    "logs": {
      "description": "View application logs",
      "script": "tail -f logs/combined.log"
    },
    "backup:db": {
      "description": "Backup database",
      "script": "pg_dump $DATABASE_URL | gzip > backups/ecox_$(date +%Y%m%d_%H%M%S).sql.gz"
    },
    "deploy:production": {
      "description": "Deploy to production",
      "script": "npm run build && npm run test && docker build -t ecox-backend:$(git rev-parse --short HEAD) ."
    }
  }
}